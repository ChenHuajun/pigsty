#!/usr/bin/ansible-playbook
#==============================================================#
# File      :   init-standby.yml
# Mtime     :   2020-04-09
# Desc      :   init cluster standby instances manually
# Path      :   playbooks/init-standby.yml
# Author    :   Vonng(fengruohang@outlook.com)
#==============================================================#

################################################################
# Postgres Scripts:  Init Cluster Primary
# Hosts :
# This scripts require an inventory host group named 'cluster'
# targeting on hosts without instance_variable role='primary' or 'offline'
#
# Variables :
#  force:  cleanup even previous postgres instance exists
#  pgconf: path to your own postgresql.conf
#  pghba: path to your own pg_hba.conf
#
#  cluster version : same as init-postgres.yml
#  repl_user  =  replicator
#  repl_pass  =  replicator
################################################################
---

################################################################
# PLAY 0: Check Inventory and build groups
################################################################
- name: Check Inventory
  gather_facts: false
  any_errors_fatal: true
  serial: 1
  become: yes
  become_method: sudo

  # local action: check inventory and build groups: primary|standby|offline
  hosts: cluster
  tasks:
    ################################################################
    # PHASE 0: [check] local inventory precondition
    ################################################################
    - name: Check cluster and version variable
      tags: [check]
      shell: "echo 'variable <cluster> and <version> are required for init procedure' && exit 1"
      delegate_to: localhost
      when: cluster is not defined or version is not defined

    # seq is cluster-wide unique incremental integer sequence to distinguish instances
    - name: Check instance variable
      tags: [check]
      shell: "echo 'instance variable <seq> is required for init procedure' && exit 1"
      delegate_to: localhost
      when: seq is not defined

    # primary instance must be explicitly specified via role=primary
    - name: Build primary group
      tags: [group]
      add_host:
        name: "{{ inventory_hostname }}"
        groups: primary
        role: primary
        instance_name: "{{ seq }}.{{ cluster }}"
      delegate_to: localhost
      when: role is defined and role == 'primary'

    # standby is the default role if role is not set
    - name: Build standby group
      tags: [group]
      add_host:
        name: "{{ inventory_hostname }}"
        groups: standby
        role: standby
        instance_name: "{{ seq }}.{{ cluster }}"
      delegate_to: localhost
      when: role is not defined or role == 'standby'

    # offline must be specified explicitly too
    - name: Build offline group
      tags: [group]
      add_host:
        name: "{{ inventory_hostname }}"
        groups: offline
        role: offline
        instance_name: "{{ seq }}.{{ cluster }}"
      delegate_to: localhost
      when: role == 'offline'

    - name: Check primary singleton
      tags: [check]
      shell: "echo 'cluster count(primary) != 1: {{ groups.primary }}' && exit 1"
      delegate_to: localhost
      when: groups.primary | length != 1




################################################################
# PLAY 1: Init cluster standby(s)
################################################################
- name: Init Cluster Standby
  gather_facts: false
  any_errors_fatal: true
  serial: 10
  become: yes
  become_method: sudo

  # works on dynamic built group 'standby'
  hosts: standby
  tasks:
    ################################################################
    # PHASE 1-2: [check] standby instance precondition
    ################################################################
    - name: Check node connectivity
      tags: [check]
      action: ping

    - name: Check postgres is installed with version {{ version }}
      tags: [check]
      shell: "[[ $(/usr/pgsql/bin/pg_ctl --version) == 'pg_ctl (PostgreSQL) {{ version }}'* ]]"

    # this checking task is skipped if force id defined (via -e force=on)
    # otherwise, abort execution if postgres is running
    - name: Check standby not running (set force=on to skip)
      tags: [check]
      shell: "ps aux | grep -v grep | grep -- '-D /pg/data' | grep pgsql || exit 0 && exit 1"
      when: force is not defined

    ################################################################
    # PHASE 2: [clean] existing stuff
    ################################################################
    - name: Stop running postgresql service
      tags: [clean]
      systemd:
        name: postgresql
        state: stopped
        enabled: no

    - name: Stop running postgres manully if still exist
      tags: [clean]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: |
        pg_exist=$(ps aux | grep -v grep | grep -- '-D /pg/data' | grep pgsql | wc -l)
        if (( $pg_exist==1 )); then
            /usr/pgsql/bin/pg_ctl -D /pg/data stop
        fi

    - name: Remove existing /pg/data directory
      tags: [clean]
      file:
        path: /pg/data
        state: absent

    - name: Recreate /pg/data directory
      tags: [clean]
      file:
        path: /pg/data
        state: directory
        owner: postgres
        group: postgres
        mode: 0700


    ################################################################
    # PHASE 3: [initdb] create database cluster FROM PRIMARY
    ################################################################
    # create pgpass for repl_user, mon_user, biz_user
    - name: Create pgpass
      tags: [initdb]
      copy:
        content: |
          *:*:*:{{ repl_user | default('replicator') }}:{{ repl_pass | default('replicator') }}
          *:*:*:{{ mon_user | default('dbuser_monitor') }}:{{ mon_pass | default('dbuser_monitor') }}
          *:*:{{ biz_db | default(cluster) }}:{{ biz_user | default(cluster) }}:{{ biz_pass | default(cluster) }}
          # postgres://{{ repl_user | default('replicator') }}:{{ repl_pass | default('replicator') }}@:/postgres
          # postgres://{{ mon_user | default('dbuser_monitor') }}:{{ mon_pass | default('dbuser_monitor') }}@:/postgres
          # postgres://{{ biz_user | default(cluster) }}:{{ biz_pass | default(cluster) }}@:/{{ biz_db | default(cluster) }}
        dest: /home/postgres/.pgpass
        owner: postgres
        group: postgres
        mode: 0600


    # check primary is available
    - name: Check standby connectivity to primary {{ groups['primary'][0] }}
      tags: [initdb]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: |
        psql "postgres://{{ repl_user | default('replicator') }}:{{ repl_pass | default('replicator') }}@{{ groups['primary'][0] }}:5432/postgres" -Atc 'SELECT 1;'


    # create basebackup from primary
    - name: Create basebackup from primary
      tags: [initdb]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: |
        /usr/pgsql/bin/pg_basebackup -D /pg/data -Fp -Xs -Pv -R -c fast -d "postgres://{{ repl_user | default('replicator') }}:{{ repl_pass | default('replicator') }}@{{ groups['primary'][0] }}:5432/postgres"
      async: 0


    ################################################################
    # PHASE 4: [config] postgres
    ################################################################
    - name: Fetch default pg_hba.conf for standby
      tags: [config]
      set_fact: default_hba_conf="templates/pg_hba-standby.conf.j2"

    # use custome postgresql.conf for standby if defined (otherwise use primary's)
    - name: Use custom postgresql.conf if provide
      tags: [config]
      template:
        src: "{{ pgconf }}"
        dest: /pg/data/postgresql.conf
        owner: postgres
        group: postgres
        mode: 0600
      when: pgconf is defined

    # use custome pg_hba.conf via ( -e pghba=/path/to/pg_hba.conf )
    - name: Setup pg_hba.conf
      tags: [config]
      template:
        src: "{{ pghba | default(default_hba_conf) }}"
        dest: /pg/data/pg_hba.conf
        owner: postgres
        group: postgres
        mode: 0600

    - name: Setup standby streaming source
      tags: [conf]
      lineinfile:
        path: /pg/data/postgresql.auto.conf
        regexp: "^primary_conninfo"
        line: "primary_conninfo = 'host={{ groups['primary'][0] }} port=5432  application_name=''{{ instance_name }}'' user={{ repl_user | default('replicator') }} passfile=''/home/postgres/.pgpass'''"
        owner: postgres
        group: postgres
        mode: 0600



    ################################################################
    # PHASE 5: [launch] postgresql service
    ################################################################
    - name: Launch PostgreSQL service
      tags: [launch]
      systemd:
        name: postgresql
        state: restarted
        enabled: yes

    - name: Check Postgres launch success
      tags: [launch]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: /usr/pgsql/bin/pg_isready

    - name: Check business user and database available
      tags: [launch]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: |
        psql "postgres://{{ biz_user | default(cluster) }}:{{ biz_pass | default(cluster) }}@localhost:5432/{{ biz_db | default(cluster) }}" -Atc 'SELECT 1;'

