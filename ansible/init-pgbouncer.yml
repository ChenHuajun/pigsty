#!/usr/bin/ansible-playbook
---
#==============================================================#
# File      :   init-pgbouncer.yml
# Mtime     :   2020-03-28
# Desc      :   init pgbouncer
# Path      :   playbooks/init-pgbouncer.yml
# Author    :   Vonng(fengruohang@outlook.com)
#==============================================================#
# Hosts :
#   works on group 'cluster' (setup pgbouncer for all hosts)
#
# Variables :
#
# pgbouncer user mon_user to collect stats just as postgres
# and biz_user is for production business usage
#
#  mon_user   =  dbuser_monitor
#  mon_pass   =  dbuser_monitor
#  biz_user   =  dbuser_test
#  biz_pass   =  dbuser_test
#==============================================================#


- name: Init Pgbouncer
  gather_facts: false
  any_errors_fatal: true
  serial: 10
  become: yes
  become_method: sudo

  hosts: cluster
  tasks:

    ################################################################
    # PHASE 0: [check] precondition
    ################################################################
    - name: Check connectivity
      tags: [check]
      action: ping

    - name: Check pgbouncer installed
      tags: [check]
      shell: "[[ -f /bin/pgbouncer ]]"



    ################################################################
    # PHASE 1: [clean] existing service
    ################################################################
    # [clean] up pgbouncer
    - name: Stop running pgbouncer service
      tags: [clean]
      ignore_errors: true
      systemd:
        name: pgbouncer
        state: stopped
        enabled: no

    # notice, if you are using user other than pgbouncer
    # do not use /var/run/pgbouncer as runtime dir
    - name: Remove existing pgbouncer directories
      tags: [clean]
      file:
        path: "{{ item }}"
        state: absent
      with_items:
        - /etc/pgbouncer
        - /var/log/pgbouncer
        - /var/run/pgbouncer

    - name: Recreate pgbouncer directories with user postgres
      tags: [clean]
      file:
        path: "{{ item }}"
        state: directory
        owner: postgres
        group: postgres
        mode: 0700
      with_items:
        - /etc/pgbouncer
        - /var/log/pgbouncer
        - /var/run/pgbouncer


    ################################################################
    # PHASE 2: [config] pgbouncer
    ################################################################
    - name: Copy pgbouncer.ini
      tags: [conf]
      template:
        src: "templates/pgbouncer.ini.j2"
        dest: /etc/pgbouncer/pgbouncer.ini
        owner: postgres
        group: postgres
        mode: 0600

    - name: Copy pgb_hba.conf
      tags: [conf]
      template:
        src: templates/pgb_hba.conf.j2
        dest: /etc/pgbouncer/pgb_hba.conf
        owner: postgres
        group: postgres
        mode: 0600

    # equivalent to: psql -Atq -U postgres -d postgres -c "SELECT concat('\"', usename, '\" \"', passwd, '\"') FROM pg_shadow WHERE NOT (NOT usesuper AND userepl)"
    # but this approach does not require a working postgres
    - name: Generate userlist.txt
      tags: [conf]
      shell: |
        md5_mon_pass="md5$(echo -n '{{ mon_pass | default('dbuser_monitor') }}{{ mon_user | default('dbuser_monitor') }}' | md5sum | awk '{print $1}')"
        md5_biz_pass="md5$(echo -n '{{ biz_pass | default(cluster) }}{{ biz_user | default(cluster) }}' | md5sum | awk '{print $1}')"
        echo '"postgres" ""' > /etc/pgbouncer/userlist.txt
        echo \"{{ mon_user | default('dbuser_monitor') }}\" \"${md5_mon_pass}\" >> /etc/pgbouncer/userlist.txt
        echo \"{{ biz_user | default(cluster) }}\" \"${md5_biz_pass}\" >> /etc/pgbouncer/userlist.txt
        chmod 0600 /etc/pgbouncer/userlist.txt
        chown -R postgres:postgres /var/run/pgbouncer /var/log/pgbouncer /etc/pgbouncer

    # systemd services
    - name: Generate pgbouncer systemd definition
      tags: [conf]
      copy:
        content: |
          [Unit]
          Description=A lightweight connection pooler for PostgreSQL
          After=syslog.target
          After=network.target

          [Service]
          Type=simple
          User=postgres
          Group=postgres
          Environment=BOUNCERCONF=/etc/pgbouncer/pgbouncer.ini
          PIDFile=/var/run/pgbouncer/pgbouncer.pid
          ExecStart=/usr/bin/pgbouncer ${BOUNCERCONF}
          ExecReload=/usr/bin/kill -HUP $MAINPID
          KillSignal=SIGINT
          TimeoutSec=300

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/pgbouncer.service
        owner: root
        group: root
        mode: 0644

    ################################################################
    # PHASE 3: [launch] pgbouncer service
    ################################################################
    # [launch]
    - name: Launch Pgbouncer service
      tags: [launch]
      systemd:
        name: pgbouncer
        state: restarted
        enabled: yes

    - name: Check pgbouncer launched
      tags: [launch]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: |
        /usr/pgsql/bin/pg_isready -p6432

    - name: Check pgbouncer bizdb accessibility
      tags: [launch]
      become: yes
      become_method: sudo
      become_user: postgres
      shell: |
        psql "postgres://{{ biz_user | default(cluster) }}:{{ biz_pass | default(cluster) }}@localhost:6432/{{ biz_db | default(cluster) }}" -Atc 'SELECT 1;'


